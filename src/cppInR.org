# -*- Mode:Org; Coding:utf-8; fill-column:158 org-html-link-org-files-as-html:nil -*-
#+TITLE:       Inline C++ Example
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DESCRIPTION: Inline C++ Example
#+KEYWORDS:    Inline C++ Example
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 820px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/ex-R/
#+EXPORT_FILE_NAME: ../docs/cppInR

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|        <r> | <l>                                          |
|  *Author:* | /{{{author}}}/                               |
| *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
#+ATTR_HTML: :align center
Copyright 2020-2021 Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   00   #    10   #    20   #    30   #    40   #    50   #    60   #    70   #    80   #    90   #   100   #   110   #   120   #   130   #   140   #   150   #   160   #
# 234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #

* Metadata

The home for this HTML file is: https://richmit.github.io/ex-R/cppInR.html

Files related to this document may be found on github: https://github.com/richmit/ex-R

Directory contents:
#+ATTR_HTML: :border 0 :frame none :rules none :align center
   | =src=     | - | The org-mode file that generated this HTML document |
   | =docs=    | - | This html document                                  |
   | =data=    | - | Data files                                          |
   | =tangled= | - | Tangled R code from this document                   |

* Load the library

#+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/cppInR.R"
library(Rcpp)
#+END_SRC

* External C++ Code

We can put our code in an external file, and tell R where to find it.

** The External Code File

In the code below we define two functions.  The first concatinates two R vecotrs, and the second computes the sum of an R vector.  We place the code into a
file called =cppInR.cpp=.  Note the export direcives in the comments!

#+INCLUDE: "cppInR.cpp" src C++

** Telling R about our external code

We must tell R where to find our enxternal code.  We do that with the =sourceCpp= function -- it will compile the code and create R wrappers to call the
functions.  Note that little bit of R code in the comment at the bottom of =cppInR.cpp= is exicuted when we run =sourceCpp=!

 #+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/cppInR.R"
Rcpp::sourceCpp('cppInR.cpp')
 #+END_SRC

 #+RESULTS:
 #+begin_example
 print('HI -- I am some code in cppRcppOutOfLine.cpp')
 [1] "HI -- I am some code in cppRcppOutOfLine.cpp"
 #+end_example

* Inline C++ Code

We define the same two functions, but we put them directly in our R code as strings.  Instead of using =sourceCpp=, we use =cppFunction=.  =cppFunction= takes care of several things for us:
   - Define the function
   - Compile the C++ code
   - Create an R wrapper for a C++ function

 #+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/cppInR.R"
 Rcpp::cppFunction('NumericVector cppIntCat(NumericVector a, NumericVector b) {
   Rcpp::NumericVector c(a.size() + b.size());
   int j=0;
   for (int i=0; i<a.size(); i++)
     c[j++] += a[i];
   for (int i=0; i<b.size(); i++)
     c[j++] += b[i];
   return c;
 }')
 #+END_SRC

*** Function returning a number

 #+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/cppInR.R"
 Rcpp::cppFunction('double cppIntSum(NumericVector x) {
   double total = 0;
   for(int i=0; i<x.size(); ++i) {
     total += x[i];
   }
   return total;
 }')
 #+END_SRC

* Calling our functions

Here we call our concatination functions (the internal one and external one):

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/cppInR.R"
cppIntCat(1:10, 2:11)
#+END_SRC

#+RESULTS:
#+begin_example
 [1]  1  2  3  4  5  6  7  8  9 10  2  3  4  5  6  7  8  9 10 11
#+end_example

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/cppInR.R"
cppExtCat(1:10, 2:11)
#+END_SRC

#+RESULTS:
#+begin_example
 [1]  1  2  3  4  5  6  7  8  9 10  2  3  4  5  6  7  8  9 10 11
#+end_example

Here we call our sum functions (the internal one and external one):

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/cppInR.R"
cppIntSum(1:10)
#+END_SRC

#+RESULTS:
#+begin_example
[1] 55
#+end_example

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/cppInR.R"
cppExtSum(1:10)
#+END_SRC

#+RESULTS:
#+begin_example
[1] 55
#+end_example

