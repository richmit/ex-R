# -*- Mode:Org; Coding:utf-8; fill-column:158 org-html-link-org-files-as-html:nil -*-
#+TITLE:       Parallel Examples
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DESCRIPTION: Parallel Examples.@EOL
#+KEYWORDS:    Parallel Examples
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 820px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/ex-R/
#+EXPORT_FILE_NAME: ../docs/parallelBasics

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|        <r> | <l>                                          |
|  *Author:* | /{{{author}}}/                               |
| *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
#+ATTR_HTML: :align center
Copyright 2020-2021 Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   00   #    10   #    20   #    30   #    40   #    50   #    60   #    70   #    80   #    90   #   100   #   110   #   120   #   130   #   140   #   150   #   160   #
# 234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #

* Source Code and Files

  - file:parallelBasics.org
  - file:parallelBasics.R

* Starting a cluster

** Load the library

#+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/parallelBasics.R"
library(parallel)
#+END_SRC

** Calculate the number instances based on core count

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
instancesInMyComputeCluster <- detectCores()
instancesInMyComputeCluster
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
[1] 8
#+end_src
 
** Start up the cluster

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
myComputeCluster <- makeCluster(instancesInMyComputeCluster)
myComputeCluster
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
socket cluster with 8 nodes on host 'localhost'
#+end_src

* Using the cluster

** Run a function in each instance (you can add arguments after the function name)

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
unlist(clusterCall(myComputeCluster, 'Sys.getpid'))
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
[1] 25704 17520 15828 18808 21660 21896 26024 12048
#+end_src

** Run an expression in each instance

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
unlist(clusterEvalQ(myComputeCluster, 2*Sys.getpid()))
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
[1] 51408 35040 31656 37616 43320 43792 52048 24096
#+end_src

** Using data across the cluster

Notice =aVar= need not be exported because it is the second argument of =parSapply=!

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
aVar <- 1:10
parSapply(myComputeCluster, aVar, sin)
#parLapply(myComputeCluster, aVar, sin)
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
 [1]  0.8414710  0.9092974  0.1411200 -0.7568025 -0.9589243 -0.2794155  0.6569866  0.9893582  0.4121185 -0.5440211
#+end_src

** Explicitly exporting data across the cluster

While =aVar= need not be exported, =bVar= must be exported -- because it is not the second argument of =parSapply=.

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
bVar <- 10
clusterExport(myComputeCluster, 'bVar')
parSapply(myComputeCluster, aVar, function (x) bVar*x)
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
 [1]  10  20  30  40  50  60  70  80  90 100
#+end_src

* Performance

** Create some big data data and put it in 'cVar'

#+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
cVar <- rnorm(instancesInMyComputeCluster*2^14)
#+END_SRC

** Export 'cVar' to to each instance

#+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
clusterExport(myComputeCluster, "cVar")
#+END_SRC

** Compute in serial

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
system.time(b<-sapply(cVar, function (x) for(i in 1:500) sin(x)))
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
   user  system elapsed 
   4.81    0.00    4.82
#+end_src

** Compute in parallel

#+BEGIN_SRC R :session :results output verbatim :exports both :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
system.time(b<-parSapply(myComputeCluster, cVar, function (x) for(i in 1:500) sin(x)))
#+END_SRC

#+RESULTS:
#+begin_src text :eval never :tangle no
   user  system elapsed 
   0.07    0.00    1.12
#+end_src

* Shut down cluster

#+BEGIN_SRC R :session :results silent :exports code :tangle "../tangled/parallelBasics.R" :wrap "src text :eval never :tangle no"
stopCluster(myComputeCluster)
#+END_SRC
